# -----------------------------------------------------------------------------
# Imports
# -----------------------------------------------------------------------------

import numpy as np
from netCDF4 import Dataset

# -----------------------------------------------------------------------------
# Functions
# -----------------------------------------------------------------------------

def get_file_name(file: str) -> str:
    """
    Determines the name of a file before the first period.

    Parameters
    ----------
    file : str
        the file or path to the file whose name will be determined

    Returns
    -------
    str
        the file name
    """
    # Linux/Mac paths
    if "/" in file:
        name = file.split("/")[-1].split(".")[0]
    # Windows paths
    elif "\\" in file:
        name = file.split("\\")[-1].split(".")[0]
    # No path, just file name
    else:
        name = file.split(".")[0]

    return name

# Load data from .ncf file
def load_ncf(data_path: str, var_name: str, file_num: str):
    """
    Loads the time and 3D space data from the .ncf file
    data_path/var_name.file_num.ncf. Note that the axes of the space data
    are ordered (y,z,x).

    Parameters
    ----------
    data_path : str
        path to the .ncf file
    var_name : str
        variable name in the file prefix; also the name of the space
        variable in the .ncf file
    file_num : str
        the number in the file prefix, corresponding to the output number

    Returns
    -------
    tuple[float, np.ndarray]
        time and space data loaded from the .ncf file; ordered (T,X)
    """
    # Load file generated by boussinesq.F90 or fields.py
    file_path = f"{data_path}/{var_name}.{file_num}.ncf"
    data = Dataset(file_path, "r", format="NETCDF4")

    # Get time and space data from file
    t = data["TIMES"][:][0]
    X = data[var_name][:][0]

    return t, X

# Save data to .ncf file
def save_ncf(out_path: str, var_name: str, file_num: str, t: float,
             data: np.ndarray):
    """
    Saves time and 3D space data as the .ncf file
    out_path/var_name.file_num.ncf

    Parameters
    ----------
    out_path : str
        path to where the .ncf file will be saved
    var_name : str
        variable name in the file prefix; also the name of the space
        variable in the .ncf file
    file_num : str
        the number in the file prefix
    t : float
        time data
    data : np.ndarray
        3D space data array

    Returns
    -------
    None
    """
    # Crate file and file dimensions
    file = Dataset(f"{out_path}/{var_name}.{file_num}.ncf", "w",
                   format="NETCDF4")
    file.createDimension("Time", 1)
    file.createDimension("X", data.shape[2])
    file.createDimension("Z", data.shape[1])
    file.createDimension("Y", data.shape[0])

    # Create variables
    T = file.createVariable("TIMES", np.float32, ("Time",))
    X = file.createVariable(var_name, np.float32, ("Time", "Y", "Z", "X"))

    # Set variables and close file
    T[:] = t
    X[:] = np.array([data])
    file.close()

# Slice data from an arbitrary number of .ncf files
def slice_ncf(data_path: str, var_name: str, file_num: str,
              xy_idx: int, xz_idx: int, yz_idx: int):
    """
    Loads time and slices of space data from the .ncf file
    data_path/var_name.file_num.ncf. The array of slices arrays
    is ordered (xy_slice, xz_slice, yz_slice). xy_slice has
    axes (x,y), xz_slice has axes (z,x), and yz_slice has axes (y,z).

    Parameters
    ----------
    data_path : str
        path to the .ncf file
    var_name : str
        variable name in the file prefix; also the name of the space
        variable in the .ncf file
    file_num : str
        the number in the file prefix, corresponding to the output number
    xy_idx : int or None
        z-coordinate index at which a slice of the xy-plane will be taken;
        no slice is taken if set to `None`
    xz_idx : int or None
        y-coordinate index at which a slice of the xz-plane will be taken;
        no slice is taken if set to `None`
    yz_idx : int or None
        x-coordinate index at which a slice of the yz-plane will be taken;
        no slice is taken if set to `None`

    Returns
    -------
    tuple[float, np.ndarray]
        time and sliced space data loaded from the .ncf file; ordered (T,X)
    """
    # Load time and space data
    t, X = load_ncf(data_path, var_name, file_num)

    # Slice space data
    X_sliced = []
    if xy_idx is not None:
        X_sliced.append(X[:,xy_idx,:])
    if xz_idx is not None:
        X_sliced.append(X[xz_idx,:,:])
    if yz_idx is not None:
        X_sliced.append(np.transpose(X[:,:,yz_idx]))
    X_sliced = np.array(X_sliced)

    return t, X_sliced

# -----------------------------------------------------------------------------